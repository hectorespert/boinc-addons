name: Docker Builder

env:
  BUILD_ARGS: "--test"
  MONITORED_FILES: "build.yaml config.yaml Dockerfile operator"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  init:
    runs-on: ubuntu-latest
    name: Initialize builds
    outputs:
      changed_addons: ${{ steps.changed_addons.outputs.addons }}
      changed: ${{ steps.changed_addons.outputs.changed }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v5

      - name: Get changed files
        id: changed_files
        uses: jitterbit/get-changed-files@v1

      - name: Find add-on directories
        id: addons
        uses: home-assistant/actions/helpers/find-addons@master

      - name: Get changed add-ons
        id: changed_addons
        run: |
          declare -a changed_addons
          for addon in ${{ steps.addons.outputs.addons }}; do
            if [[ "${{ steps.changed_files.outputs.all }}" =~ $addon ]]; then
              for file in ${{ env.MONITORED_FILES }}; do
                  if [[ "${{ steps.changed_files.outputs.all }}" =~ $addon/$file ]]; then
                    if [[ ! "${changed_addons[@]}" =~ $addon ]]; then
                      changed_addons+=("\"${addon}\",");
                    fi
                  fi
              done
            fi
          done

          changed=$(echo ${changed_addons[@]} | rev | cut -c 2- | rev)

          if [[ -n ${changed} ]]; then
            echo "Changed add-ons: $changed";
            echo "changed=true" >> $GITHUB_OUTPUT;
            echo "addons=[$changed]" >> $GITHUB_OUTPUT;
          else
            echo "No add-on had any monitored files changed (${{ env.MONITORED_FILES }})";
          fi

  check_version:
    needs: init
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: needs.init.outputs.changed == 'true'
    name: Check version tag for ${{ matrix.addon }}
    strategy:
      matrix:
        addon: ${{ fromJson(needs.init.outputs.changed_addons) }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up yq
        uses: mikefarah/yq@v4

      - name: Get addon version
        id: version
        run: |
          VERSION=$(yq e '.version' ${{ matrix.addon }}/config.yaml)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=${{ matrix.addon }}-v$VERSION" >> $GITHUB_OUTPUT
          echo "Addon: ${{ matrix.addon }}, Version: $VERSION"

      - name: Check version is greater than published
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: check_version
        run: |
          git fetch --tags
          
          # Get current version
          CURRENT_VERSION="${{ steps.version.outputs.version }}"
          echo "Current version: $CURRENT_VERSION"
          
          # Check if tag already exists
          if git rev-parse "${{ steps.version.outputs.tag }}" >/dev/null 2>&1; then
            echo "❌ Tag ${{ steps.version.outputs.tag }} already exists"
            exit 1
          fi
          
          # Get the latest published version for this addon
          LATEST_TAG=$(git tag -l "${{ matrix.addon }}-v*" | sort -V | tail -n 1)
          
          if [ -z "$LATEST_TAG" ]; then
            echo "✅ No previous versions found, this is the first release"
            exit 0
          fi
          
          # Extract version from latest tag
          LATEST_VERSION=$(echo "$LATEST_TAG" | sed 's/${{ matrix.addon }}-v//')
          echo "Latest published version: $LATEST_VERSION"
          
          # Compare versions using sort -V (version sort)
          HIGHER=$(printf "%s\n%s" "$LATEST_VERSION" "$CURRENT_VERSION" | sort -V | tail -n 1)
          
          if [ "$HIGHER" = "$CURRENT_VERSION" ] && [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "✅ Version $CURRENT_VERSION is greater than $LATEST_VERSION"
          else
            echo "❌ Version $CURRENT_VERSION is not greater than latest published version $LATEST_VERSION"
            exit 1
          fi

      - name: Skip version check for PR
        if: github.event_name == 'pull_request'
        run: |
          echo "ℹ️ Skipping version validation for pull request"
          echo "Current version: ${{ steps.version.outputs.version }}"

  build:
    needs: [init, check_version]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    if: needs.init.outputs.changed == 'true'
    name: Build ${{ matrix.arch }} ${{ matrix.addon }} add-on
    strategy:
      matrix:
        addon: ${{ fromJson(needs.init.outputs.changed_addons) }}
        arch: ["aarch64", "amd64", "armhf", "armv7", "i386"]

    steps:
      - name: Check out repository
        uses: actions/checkout@v5

      - name: Get information
        id: info
        uses: home-assistant/actions/helpers/info@master
        with:
          path: "./${{ matrix.addon }}"

      - name: Check if add-on should be built
        id: check
        run: |
          if [[ "${{ steps.info.outputs.architectures }}" =~ ${{ matrix.arch }} ]]; then
             echo "build_arch=true" >> $GITHUB_OUTPUT;
             echo "image=$(echo ${{ steps.info.outputs.image }} | cut -d'/' -f3)" >> $GITHUB_OUTPUT;
             if [[ -z "${{ github.head_ref }}" ]] && [[ "${{ github.event_name }}" == "push" ]]; then
                 echo "BUILD_ARGS=" >> $GITHUB_ENV;
             fi
           else
             echo "${{ matrix.arch }} is not a valid arch for ${{ matrix.addon }}, skipping build";
             echo "build_arch=false" >> $GITHUB_OUTPUT;
          fi

      - name: Login to GitHub Container Registry
        if: env.BUILD_ARGS != '--test'
        uses: docker/login-action@v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up yq
        if: steps.check.outputs.build_arch == 'true'
        uses: mikefarah/yq@v4

      - name: Validate image attribute
        if: steps.check.outputs.build_arch == 'true'
        run: |
          CONFIG_FILE="${{ matrix.addon }}/config.yaml"
          
          # Check if image attribute exists and is not commented
          IMAGE=$(yq e '.image' "$CONFIG_FILE")
          
          if [ "$IMAGE" = "null" ] || [ -z "$IMAGE" ]; then
            echo "❌ Error: 'image' attribute is not defined in $CONFIG_FILE"
            exit 1
          fi
          
          # Check if the line is commented in the original file
          if grep -E '^\s*#\s*image:' "$CONFIG_FILE" > /dev/null; then
            echo "❌ Error: 'image' attribute is commented out in $CONFIG_FILE"
            exit 1
          fi
          
          echo "✅ Image attribute is properly defined: $IMAGE"

      - name: Build ${{ matrix.addon }} add-on
        if: steps.check.outputs.build_arch == 'true'
        uses: home-assistant/builder@2025.09.0
        with:
          args: |
            ${{ env.BUILD_ARGS }} \
            --${{ matrix.arch }} \
            --target /data/${{ matrix.addon }} \
            --image "${{ steps.check.outputs.image }}" \
            --docker-hub "ghcr.io/${{ github.repository_owner }}" \
            --cosign \
            --addon

      - name: Test boinc add-on
        if: matrix.arch == 'amd64' && matrix.addon == 'boinc' && env.BUILD_ARGS == '--test' && steps.check.outputs.build_arch == 'true'
        working-directory: boinc
        run: |
          docker run --uts=host --pid=host --rm -v boinc:/data -v $(pwd)/operator/options.json:/data/options.json:ro ghcr.io/hectorespert/amd64-addon-boinc:latest --log-level DEBUG --exit-immediately true

  create_tag:
    needs: [init, build, check_version]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.init.outputs.changed == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: Create version tag for ${{ matrix.addon }}
    strategy:
      matrix:
        addon: ${{ fromJson(needs.init.outputs.changed_addons) }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v5

      - name: Set up yq
        uses: mikefarah/yq@v4

      - name: Get addon version
        id: version
        run: |
          VERSION=$(yq e '.version' ${{ matrix.addon }}/config.yaml)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=${{ matrix.addon }}-v$VERSION" >> $GITHUB_OUTPUT
          echo "Creating tag: ${{ matrix.addon }}-v$VERSION"

      - name: Create and push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ steps.version.outputs.tag }}" -m "Release ${{ matrix.addon }} version ${{ steps.version.outputs.version }}"
          git push origin "${{ steps.version.outputs.tag }}"
